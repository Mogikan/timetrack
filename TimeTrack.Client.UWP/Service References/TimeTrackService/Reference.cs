//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace TimeTrack.Client.UWP.TimeTrackService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/TimeTrack.Model")]
    public partial class Project : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ClosedField;
        
        private int FKProjectManagerField;
        
        private System.DateTime FinishDateField;
        
        private int IdField;
        
        private string NameField;
        
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Closed {
            get {
                return this.ClosedField;
            }
            set {
                if ((this.ClosedField.Equals(value) != true)) {
                    this.ClosedField = value;
                    this.RaisePropertyChanged("Closed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FKProjectManager {
            get {
                return this.FKProjectManagerField;
            }
            set {
                if ((this.FKProjectManagerField.Equals(value) != true)) {
                    this.FKProjectManagerField = value;
                    this.RaisePropertyChanged("FKProjectManager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FinishDate {
            get {
                return this.FinishDateField;
            }
            set {
                if ((this.FinishDateField.Equals(value) != true)) {
                    this.FinishDateField = value;
                    this.RaisePropertyChanged("FinishDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/TimeTrack.Model")]
    public partial class Employee : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FullNameField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Timesheet", Namespace="http://schemas.datacontract.org/2004/07/TimeTrack.Model")]
    public partial class Timesheet : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateField;
        
        private int FkEmployeeField;
        
        private int FkProjectField;
        
        private int IdField;
        
        private string NotesField;
        
        private double SpendTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FkEmployee {
            get {
                return this.FkEmployeeField;
            }
            set {
                if ((this.FkEmployeeField.Equals(value) != true)) {
                    this.FkEmployeeField = value;
                    this.RaisePropertyChanged("FkEmployee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FkProject {
            get {
                return this.FkProjectField;
            }
            set {
                if ((this.FkProjectField.Equals(value) != true)) {
                    this.FkProjectField = value;
                    this.RaisePropertyChanged("FkProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpendTime {
            get {
                return this.SpendTimeField;
            }
            set {
                if ((this.SpendTimeField.Equals(value) != true)) {
                    this.SpendTimeField = value;
                    this.RaisePropertyChanged("SpendTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TimeTrackService.TimeTrackService")]
    public interface TimeTrackService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/GetProjects", ReplyAction="http://tempuri.org/TimeTrackService/GetProjectsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TimeTrack.Client.UWP.TimeTrackService.Project>> GetProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/GetProjectById", ReplyAction="http://tempuri.org/TimeTrackService/GetProjectByIdResponse")]
        System.Threading.Tasks.Task<TimeTrack.Client.UWP.TimeTrackService.Project> GetProjectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/AddProject", ReplyAction="http://tempuri.org/TimeTrackService/AddProjectResponse")]
        System.Threading.Tasks.Task AddProjectAsync(TimeTrack.Client.UWP.TimeTrackService.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/UpdateProject", ReplyAction="http://tempuri.org/TimeTrackService/UpdateProjectResponse")]
        System.Threading.Tasks.Task UpdateProjectAsync(TimeTrack.Client.UWP.TimeTrackService.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/DeleteProjectById", ReplyAction="http://tempuri.org/TimeTrackService/DeleteProjectByIdResponse")]
        System.Threading.Tasks.Task DeleteProjectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/GetEmployees", ReplyAction="http://tempuri.org/TimeTrackService/GetEmployeesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TimeTrack.Client.UWP.TimeTrackService.Employee>> GetEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/GetEmployeeById", ReplyAction="http://tempuri.org/TimeTrackService/GetEmployeeByIdResponse")]
        System.Threading.Tasks.Task<TimeTrack.Client.UWP.TimeTrackService.Employee> GetEmployeeByIdAsync(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/AddEmployee", ReplyAction="http://tempuri.org/TimeTrackService/AddEmployeeResponse")]
        System.Threading.Tasks.Task AddEmployeeAsync(TimeTrack.Client.UWP.TimeTrackService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/UpdateEmployee", ReplyAction="http://tempuri.org/TimeTrackService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task UpdateEmployeeAsync(TimeTrack.Client.UWP.TimeTrackService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/DeleteEmployeeById", ReplyAction="http://tempuri.org/TimeTrackService/DeleteEmployeeByIdResponse")]
        System.Threading.Tasks.Task DeleteEmployeeByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/GetTimeSheets", ReplyAction="http://tempuri.org/TimeTrackService/GetTimeSheetsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TimeTrack.Client.UWP.TimeTrackService.Timesheet>> GetTimeSheetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/GetTimeSheetById", ReplyAction="http://tempuri.org/TimeTrackService/GetTimeSheetByIdResponse")]
        System.Threading.Tasks.Task<TimeTrack.Client.UWP.TimeTrackService.Timesheet> GetTimeSheetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/AddTimesheet", ReplyAction="http://tempuri.org/TimeTrackService/AddTimesheetResponse")]
        System.Threading.Tasks.Task AddTimesheetAsync(TimeTrack.Client.UWP.TimeTrackService.Timesheet timesheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/UpdateTimeSheet", ReplyAction="http://tempuri.org/TimeTrackService/UpdateTimeSheetResponse")]
        System.Threading.Tasks.Task UpdateTimeSheetAsync(TimeTrack.Client.UWP.TimeTrackService.Timesheet timesheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeTrackService/DeleteTimesheetById", ReplyAction="http://tempuri.org/TimeTrackService/DeleteTimesheetByIdResponse")]
        System.Threading.Tasks.Task DeleteTimesheetByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TimeTrackServiceChannel : TimeTrack.Client.UWP.TimeTrackService.TimeTrackService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimeTrackServiceClient : System.ServiceModel.ClientBase<TimeTrack.Client.UWP.TimeTrackService.TimeTrackService>, TimeTrack.Client.UWP.TimeTrackService.TimeTrackService {
        
        public TimeTrackServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TimeTrack.Client.UWP.TimeTrackService.Project>> GetProjectsAsync() {
            return base.Channel.GetProjectsAsync();
        }
        
        public System.Threading.Tasks.Task<TimeTrack.Client.UWP.TimeTrackService.Project> GetProjectByIdAsync(int id) {
            return base.Channel.GetProjectByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task AddProjectAsync(TimeTrack.Client.UWP.TimeTrackService.Project project) {
            return base.Channel.AddProjectAsync(project);
        }
        
        public System.Threading.Tasks.Task UpdateProjectAsync(TimeTrack.Client.UWP.TimeTrackService.Project project) {
            return base.Channel.UpdateProjectAsync(project);
        }
        
        public System.Threading.Tasks.Task DeleteProjectByIdAsync(int id) {
            return base.Channel.DeleteProjectByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TimeTrack.Client.UWP.TimeTrackService.Employee>> GetEmployeesAsync() {
            return base.Channel.GetEmployeesAsync();
        }
        
        public System.Threading.Tasks.Task<TimeTrack.Client.UWP.TimeTrackService.Employee> GetEmployeeByIdAsync(System.Nullable<int> id) {
            return base.Channel.GetEmployeeByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task AddEmployeeAsync(TimeTrack.Client.UWP.TimeTrackService.Employee employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public System.Threading.Tasks.Task UpdateEmployeeAsync(TimeTrack.Client.UWP.TimeTrackService.Employee employee) {
            return base.Channel.UpdateEmployeeAsync(employee);
        }
        
        public System.Threading.Tasks.Task DeleteEmployeeByIdAsync(int id) {
            return base.Channel.DeleteEmployeeByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TimeTrack.Client.UWP.TimeTrackService.Timesheet>> GetTimeSheetsAsync() {
            return base.Channel.GetTimeSheetsAsync();
        }
        
        public System.Threading.Tasks.Task<TimeTrack.Client.UWP.TimeTrackService.Timesheet> GetTimeSheetByIdAsync(int id) {
            return base.Channel.GetTimeSheetByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task AddTimesheetAsync(TimeTrack.Client.UWP.TimeTrackService.Timesheet timesheet) {
            return base.Channel.AddTimesheetAsync(timesheet);
        }
        
        public System.Threading.Tasks.Task UpdateTimeSheetAsync(TimeTrack.Client.UWP.TimeTrackService.Timesheet timesheet) {
            return base.Channel.UpdateTimeSheetAsync(timesheet);
        }
        
        public System.Threading.Tasks.Task DeleteTimesheetByIdAsync(int id) {
            return base.Channel.DeleteTimesheetByIdAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
    }
}
